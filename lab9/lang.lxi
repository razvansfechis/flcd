%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include "lang.tab.h"
    int lines = 1;
%}

%option noyywrap
%option caseless

DIGIT [0-9]
NON_ZERO_DIGIT [1-9]
INT_CONSTANT [+-]?{NON_ZERO_DIGIT}{DIGIT}*|0
LETTER [a-zA-Z_]
SPECIAL_CHAR [ ?:*\^+=.!]
STRING_CONSTANT (\"({LETTER}|{DIGIT}|{SPECIAL_CHAR})*\")
id {LETTER}({LETTER}|{DIGIT})*
BAD_IDENTIFIER ({DIGIT})+({LETTER})+({LETTER}|{DIGIT})*

%%

"integer" { printf("SCANNER: %s - reserved word\n", yytext); return INTEGER; }
"str" { printf("SCANNER: %s - reserved word\n", yytext); return STR; }
"char" { printf("SCANNER: %s - reserved word\n", yytext); return CHAR; }
"read" { printf("SCANNER: %s - reserved word\n", yytext); return READ; }
"if" { printf("SCANNER: %s - reserved word\n", yytext); return IF; }
"else" { printf("SCANNER: %s - reserved word\n", yytext); return ELSE; }
"print" { printf("SCANNER: %s - reserved word\n", yytext); return PRINT; }
"while" { printf("SCANNER: %s - reserved word\n", yytext); return WHILE; }
"and" { printf("SCANNER: %s - reserved word\n", yytext); return AND; }
"start" { printf("SCANNER: %s - reserved word\n", yytext); return START; }

"+" { printf("SCANNER: %s - operator\n", yytext); return plus; }
"-" { printf("SCANNER: %s - operator\n", yytext); return minus; }
"*" { printf("SCANNER: %s - operator\n", yytext); return times; }
"/" { printf("SCANNER: %s - operator\n", yytext); return div; }
"<" { printf("SCANNER: %s - operator\n", yytext); return less; }
"<=" { printf("SCANNER: %s - operator\n", yytext); return lessOrEqual; }
"=" { printf("SCANNER: %s - operator\n", yytext); return equal; }
">=" { printf("SCANNER: %s - operator\n", yytext); return biggerOrEqual; }
"==" { printf("SCANNER: %s - operator\n", yytext); return equalEqual; }
"<>" { printf("SCANNER: %s - operator\n", yytext); return notEqual; }
"%" { printf("SCANNER: %s - operator\n", yytext); return mod; }
">" { printf("SCANNER: %s - operator\n", yytext); return bigger; }
":" { printf("SCANNER: %s - operator\n", yytext); return assignType; }
"<-" { printf("SCANNER: %s - operator\n", yytext); return assignVar; }

"[" { printf("SCANNER: %s - separator\n", yytext); return leftBracket; }
"]" { printf("SCANNER: %s - separator\n", yytext); return rightBracket; } 
";" { printf("SCANNER: %s - separator\n", yytext); return semicolon; } 
"(" { printf("SCANNER: %s - separator\n", yytext); return roundLeftBracket; } 
")" { printf("SCANNER: %s - separator\n", yytext); return roundRightBracket; }
"{" { printf("SCANNER: %s - separator\n", yytext); return curlyLeftBracket; } 
"}" { printf("SCANNER: %s - separator\n", yytext); return curlyRightBracket; } 
"," { printf("SCANNER: %s - separator\n", yytext); return comma; }

{id} { printf("SCANNER: %s - identifier\n", yytext); return ID; }

{INT_CONSTANT} { printf("SCANNER: %s - integer constant\n", yytext); return INT_CONSTANT; }
{STRING_CONSTANT} { printf("SCANNER: %s - string constant\n", yytext); return STRING_CONSTANT; }

[ \t]+ {}

[\n]+ {++lines;}

. {printf("SCANNER: Error at token %s at line %d\n", yytext, lines); exit(1);}

%%